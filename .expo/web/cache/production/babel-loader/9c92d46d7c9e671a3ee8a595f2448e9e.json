{"ast":null,"code":"function emptyFunction(){}function isScreenReaderEnabled(){return new Promise(function(resolve,reject){resolve(true);});}var AccessibilityInfo={isScreenReaderEnabled:isScreenReaderEnabled,fetch:isScreenReaderEnabled,addEventListener:function addEventListener(eventName,handler){return{remove:emptyFunction};},setAccessibilityFocus:function setAccessibilityFocus(reactTag){},announceForAccessibility:function announceForAccessibility(announcement){},removeEventListener:function removeEventListener(eventName,handler){return;}};export default AccessibilityInfo;","map":{"version":3,"sources":["/home/mrmonotreme/Desktop/tmk/mobile_app/expo/TMK/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["emptyFunction","isScreenReaderEnabled","Promise","resolve","reject","AccessibilityInfo","fetch","addEventListener","eventName","handler","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","removeEventListener"],"mappings":"AAQA,QAASA,CAAAA,aAAT,EAAyB,CAAE,CAE3B,QAASC,CAAAA,qBAAT,EAAiC,CAC/B,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CD,OAAO,CAAC,IAAD,CAAP,CACD,CAFM,CAAP,CAGD,CAED,GAAIE,CAAAA,iBAAiB,CAAG,CAOtBJ,qBAAqB,CAAEA,qBAPD,CAYtBK,KAAK,CAAEL,qBAZe,CAiBtBM,gBAAgB,CAAE,QAASA,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqCC,OAArC,CAA8C,CAC9D,MAAO,CACLC,MAAM,CAAEV,aADH,CAAP,CAGD,CArBqB,CA0BtBW,qBAAqB,CAAE,QAASA,CAAAA,qBAAT,CAA+BC,QAA/B,CAAyC,CAAE,CA1B5C,CA+BtBC,wBAAwB,CAAE,QAASA,CAAAA,wBAAT,CAAkCC,YAAlC,CAAgD,CAAE,CA/BtD,CAoCtBC,mBAAmB,CAAE,QAASA,CAAAA,mBAAT,CAA6BP,SAA7B,CAAwCC,OAAxC,CAAiD,CACpE,OACD,CAtCqB,CAAxB,CAwCA,cAAeJ,CAAAA,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction emptyFunction() {}\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled: isScreenReaderEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events:\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}